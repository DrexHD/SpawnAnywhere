import org.jetbrains.changelog.Changelog

plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id "me.modmuss50.mod-publish-plugin" version "0.5.1"
	id 'org.jetbrains.changelog' version '2.+'
}

version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.4.0-beta.2")))
	include(modImplementation("me.lucko:fabric-permissions-api:${project.permission_version}"))
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishMods {
	file = remapJar.archiveFile
	type = STABLE
	changelog = fetchChangelog()

	displayName = "SpawnAnywhere ${version.get()}"
	modLoaders.add("fabric")
	modLoaders.add("quilt")

	github {
		accessToken = providers.environmentVariable("GITHUB_TOKEN")
		repository = providers.environmentVariable("GITHUB_REPOSITORY").getOrElse("DrexHD/dryrun")
		commitish = providers.environmentVariable("GITHUB_REF_NAME").getOrElse("dryrun")
	}
}

private String fetchChangelog() {
	def log = getChangelog.changelog.get()
	if (log.has(project.mod_version)) {
		return log.renderItem(
				log.get(project.mod_version).withHeader(false),
				Changelog.OutputType.MARKDOWN
		)
	} else {
		return ""
	}
}